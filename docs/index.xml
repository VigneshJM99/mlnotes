<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vignesh</title>
    <link>https://VigneshJM99.github.io/mlnotes/</link>
    <description>Recent content on Vignesh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://VigneshJM99.github.io/mlnotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Accumulate</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/accumulate/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/accumulate/</guid>
      <description>from numpy import *add.accumulate(array([1.,2.,3.,4.])) array([ 1., 3., 6., 10.])  array([1., 1.+2., (1.+2.)+3., ((1.+2.)+3.)+4.]) array([ 1., 3., 6., 10.])  multiply.accumulate(array([1.,2.,3.,4.])) array([ 1., 2., 6., 24.])  array([1., 1.*2., (1.*2.)*3., ((1.*2.)*3.)*4.]) array([ 1., 2., 6., 24.])  add.accumulate(array([[1,2,3],[4,5,6]]), axis = 0) array([[1, 2, 3], [5, 7, 9]])  add.accumulate(array([[1,2,3],[4,5,6]]), axis = 1) array([[ 1, 3, 6], [ 4, 9, 15]])  </description>
    </item>
    
    <item>
      <title>Add</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/add/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/add/</guid>
      <description>from numpy import *add(array([-1.2, 1.2]), array([1,3])) array([-0.2, 4.2])  array([-1.2, 1.2]) + array([1,3]) array([-0.2, 4.2])  </description>
    </item>
    
    <item>
      <title>Aggregation And Representing Uncertainity</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/agg-rep-unc/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/agg-rep-unc/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&amp;#34;darkgrid&amp;#34;)fmri = sns.load_dataset(&amp;#34;fmri&amp;#34;) sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, kind=&amp;#34;line&amp;#34;, data=fmri); sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, ci=None, kind=&amp;#34;line&amp;#34;, data=fmri); sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, kind=&amp;#34;line&amp;#34;, ci=&amp;#34;sd&amp;#34;, data=fmri); sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, estimator=None, kind=&amp;#34;line&amp;#34;, data=fmri); </description>
    </item>
    
    <item>
      <title>Append</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/append/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/append/</guid>
      <description>from numpy import *a = array([10, 20, 30, 40]) append(a,50) array([10, 20, 30, 40, 50])  append(a, [50, 60]) array([10, 20, 30, 40, 50, 60])  a = array([[10, 20, 30],[40, 50, 60],[70, 80, 90]]) append(a,[[15, 15, 15]], axis = 0) array([[10, 20, 30], [40, 50, 60], [70, 80, 90], [15, 15, 15]])  append(a, [[15],[15],[15]], axis = 1) array([[10, 20, 30, 15], [40, 50, 60, 15], [70, 80, 90, 15]])  </description>
    </item>
    
    <item>
      <title>Array_Split</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/array_split/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/array_split/</guid>
      <description>from numpy import *a = array([[1, 2, 3, 4],[5, 6, 7, 8]]) array_split(a, 2, axis = 0) [array([[1, 2, 3, 4]]), array([[5, 6, 7, 8]])]  array_split(a, 4, axis = 1) [array([[1], [5]]), array([[2], [6]]), array([[3], [7]]), array([[4], [8]])]  array_split(a, 3, axis = 1) [array([[1, 2], [5, 6]]), array([[3], [7]]), array([[4], [8]])]  array_split(a, [2, 3], axis = 1) [array([[1, 2], [5, 6]]), array([[3], [7]]), array([[4], [8]])]  </description>
    </item>
    
    <item>
      <title>Assigning data</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/asssigning-data/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/asssigning-data/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df[&amp;#39;Review&amp;#39;] = &amp;#39;Ok&amp;#39;df[&amp;#39;Review&amp;#39;] 0 Ok 1 Ok 2 Ok 3 Ok 4 Ok .. 1229 Ok 1230 Ok 1231 Ok 1232 Ok 1233 Ok Name: Review, Length: 1234, dtype: object  df[&amp;#39;index_backwards&amp;#39;] = range(len(df), 0, -1) df[&amp;#39;index_backwards&amp;#39;] 0 1234 1 1233 2 1232 3 1231 4 1230 ... 1229 5 1230 4 1231 3 1232 2 1233 1 Name: index_backwards, Length: 1234, dtype: int64  </description>
    </item>
    
    <item>
      <title>Average</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/average/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/average/</guid>
      <description>from numpy import *a = array([1, 2, 3, 4, 5]) w = array([0.1, 0.2, 0.3, 0.4, 0.5])average(a) 3.0  average(a, weights = w) 3.6666666666666665  average(a, weights = w, returned = True) (3.6666666666666665, 1.5)  </description>
    </item>
    
    <item>
      <title>Bar plots</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/bar-plots/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/bar-plots/</guid>
      <description>import seaborn as sns import matplotlib.pyplot as plt sns.set(style=&amp;#34;ticks&amp;#34;, color_codes=True)titanic = sns.load_dataset(&amp;#34;titanic&amp;#34;) sns.catplot(x=&amp;#34;sex&amp;#34;, y=&amp;#34;survived&amp;#34;, hue=&amp;#34;class&amp;#34;, kind=&amp;#34;bar&amp;#34;, data=titanic); sns.catplot(x=&amp;#34;deck&amp;#34;, kind=&amp;#34;count&amp;#34;, palette=&amp;#34;ch:.25&amp;#34;, data=titanic); sns.catplot(y=&amp;#34;deck&amp;#34;, hue=&amp;#34;class&amp;#34;, kind=&amp;#34;count&amp;#34;, palette=&amp;#34;pastel&amp;#34;, edgecolor=&amp;#34;.6&amp;#34;, data=titanic); </description>
    </item>
    
    <item>
      <title>Binarisation</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/binarisation/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/binarisation/</guid>
      <description>import numpy as np from sklearn import preprocessingInput_data = np.array([ [2.1, -1.9, 5.5], [-1.5, 2.4, 3.5], [0.5, -7.9, 5.6], [5.9, 2.3, -5.8]] )data_binarized = preprocessing.Binarizer(threshold=0.5).transform(Input_data)print(&amp;#34;\nBinarized data:\n&amp;#34;, data_binarized) Binarized data: [[1. 0. 1.] [0. 1. 1.] [0. 0. 1.] [1. 1. 0.]]  </description>
    </item>
    
    <item>
      <title>Boxplots</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/boxplots/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/boxplots/</guid>
      <description>import seaborn as sns import matplotlib.pyplot as plt sns.set(style=&amp;#34;ticks&amp;#34;, color_codes=True)tips = sns.load_dataset(&amp;#34;tips&amp;#34;)sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, kind=&amp;#34;box&amp;#34;, data=tips); sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, hue=&amp;#34;smoker&amp;#34;, kind=&amp;#34;box&amp;#34;, data=tips); tips[&amp;#34;weekend&amp;#34;] = tips[&amp;#34;day&amp;#34;].isin([&amp;#34;Sat&amp;#34;, &amp;#34;Sun&amp;#34;]) sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, hue=&amp;#34;weekend&amp;#34;, kind=&amp;#34;box&amp;#34;, dodge=False, data=tips); diamonds = sns.load_dataset(&amp;#34;diamonds&amp;#34;) sns.catplot(x=&amp;#34;color&amp;#34;, y=&amp;#34;price&amp;#34;, kind=&amp;#34;boxen&amp;#34;, data=diamonds.sort_values(&amp;#34;color&amp;#34;)); </description>
    </item>
    
    <item>
      <title>Categorical scatterplots</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/categorical-scatterplots/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/categorical-scatterplots/</guid>
      <description>import seaborn as sns import matplotlib.pyplot as plt sns.set(style=&amp;#34;ticks&amp;#34;, color_codes=True)tips = sns.load_dataset(&amp;#34;tips&amp;#34;) sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, data=tips); sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, jitter=False, data=tips); sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, kind=&amp;#34;swarm&amp;#34;, data=tips); sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, hue=&amp;#34;sex&amp;#34;, kind=&amp;#34;swarm&amp;#34;, data=tips); sns.catplot(x=&amp;#34;size&amp;#34;, y=&amp;#34;total_bill&amp;#34;, kind=&amp;#34;swarm&amp;#34;, data=tips.query(&amp;#34;size != 3&amp;#34;)); sns.catplot(x=&amp;#34;smoker&amp;#34;, y=&amp;#34;tip&amp;#34;, order=[&amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;], data=tips); sns.catplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;day&amp;#34;, hue=&amp;#34;time&amp;#34;, kind=&amp;#34;swarm&amp;#34;, data=tips); </description>
    </item>
    
    <item>
      <title>Combining</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/combining/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/combining/</guid>
      <description>import pandas as pddf = pd.read_csv(&amp;#39;diabetes.csv&amp;#39;) df2 = pd.read_csv(&amp;#39;heart.csv&amp;#39;)pd.concat([df, df2])  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Pregnancies Glucose BloodPressure SkinThickness Insulin BMI DiabetesPedigreeFunction Age Outcome age ... chol fbs restecg thalach exang oldpeak slope ca thal target     0 6.0 148.0 72.0 35.0 0.0 33.6 0.627 50.</description>
    </item>
    
    <item>
      <title>Concatenate</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/concatenate/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/concatenate/</guid>
      <description>from numpy import *x = array([[1, 2],[3, 4]]) y = array([[5, 6],[7, 8]])concatenate((x, y)) array([[1, 2], [3, 4], [5, 6], [7, 8]])  concatenate((x, y), axis = 1) array([[1, 2, 5, 6], [3, 4, 7, 8]])  </description>
    </item>
    
    <item>
      <title>Continuity With Line Plots</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/continuity-with-line-plots/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/continuity-with-line-plots/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&amp;#34;darkgrid&amp;#34;)df = pd.DataFrame(dict(time=np.arange(500), value=np.random.randn(500).cumsum())) g = sns.relplot(x=&amp;#34;time&amp;#34;, y=&amp;#34;value&amp;#34;, kind=&amp;#34;line&amp;#34;, data=df) g.fig.autofmt_xdate() df = pd.DataFrame(np.random.randn(500, 2).cumsum(axis=0), columns=[&amp;#34;x&amp;#34;, &amp;#34;y&amp;#34;]) sns.relplot(x=&amp;#34;x&amp;#34;, y=&amp;#34;y&amp;#34;, sort=False, kind=&amp;#34;line&amp;#34;, data=df); </description>
    </item>
    
    <item>
      <title>Data As Table</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/data-as-table/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/data-as-table/</guid>
      <description>import seaborn as snsiris = sns.load_dataset(&amp;#39;iris&amp;#39;)iris.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    sepal_length sepal_width petal_length petal_width species     0 5.1 3.5 1.4 0.2 setosa   1 4.9 3.0 1.4 0.2 setosa   2 4.7 3.2 1.3 0.2 setosa   3 4.6 3.1 1.5 0.</description>
    </item>
    
    <item>
      <title>Data As Target</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/data-as-target/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/data-as-target/</guid>
      <description>import seaborn as sns import seaborn as sns; sns.set()iris = sns.load_dataset(&amp;#39;iris&amp;#39;) %matplotlib inline sns.pairplot(iris, hue=&amp;#39;species&amp;#39;, height=3); X_iris = iris.drop(&amp;#39;species&amp;#39;, axis=1) X_iris.shape (150, 4)  y_iris = iris[&amp;#39;species&amp;#39;] y_iris.shape (150,)  </description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/data-types/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/data-types/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df.Mileage.dtype dtype(&#39;O&#39;)  df.dtypes Name object Location object Year int64 Kilometers_Driven int64 Fuel_Type object Transmission object Owner_Type object Mileage object Engine object Power object Seats float64 dtype: object  df.Kilometers_Driven.astype(&amp;#39;float64&amp;#39;) 0 40929.0 1 54493.0 2 34000.0 3 139000.0 4 29000.0 ... 1229 89411.0 1230 59000.0 1231 28000.0 1232 52262.0 1233 72443.0 Name: Kilometers_Driven, Length: 1234, dtype: float64  </description>
    </item>
    
    <item>
      <title>Example</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/example/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/example/</guid>
      <description>import seaborn as sns iris = sns.load_dataset(&amp;#39;iris&amp;#39;)X_iris = iris.drop(&amp;#39;species&amp;#39;, axis = 1) X_iris.shape (150, 4)  y_iris = iris[&amp;#39;species&amp;#39;] y_iris.shape (150,)  %matplotlib inline import matplotlib.pyplot as plt import numpy as np rng = np.random.RandomState(35) x = 10*rng.rand(40) y = 2*x-1+rng.randn(40) plt.scatter(x,y); </description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/getting-started/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/getting-started/</guid>
      <description>import pandas as pdpd.DataFrame({&amp;#39;Yes&amp;#39;: [50, 21], &amp;#39;No&amp;#39;: [131, 2]})  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Yes No     0 50 131   1 21 2     pd.DataFrame({&amp;#39;Bob&amp;#39;: [&amp;#39;I liked it.&amp;#39;, &amp;#39;It was awful.&amp;#39;], &amp;#39;Sue&amp;#39;: [&amp;#39;Pretty good.&amp;#39;, &amp;#39;Bland.&amp;#39;]})  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .</description>
    </item>
    
    <item>
      <title>Grouping</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/grouping/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/grouping/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df.groupby(&amp;#39;Location&amp;#39;).Location.count() Location Ahmedabad 51 Bangalore 82 Chennai 97 Coimbatore 136 Delhi 106 Hyderabad 134 Jaipur 86 Kochi 121 Kolkata 119 Mumbai 159 Pune 143 Name: Location, dtype: int64  df.groupby(&amp;#39;Fuel_Type&amp;#39;).Fuel_Type.count() Fuel_Type CNG 6 Diesel 647 LPG 2 Petrol 579 Name: Fuel_Type, dtype: int64  df.groupby(&amp;#39;Transmission&amp;#39;).Transmission.count() Transmission Automatic 329 Manual 905 Name: Transmission, dtype: int64  df.groupby(&amp;#39;Owner_Type&amp;#39;).Owner_Type.count() Owner_Type First 1023 Fourth &amp;amp; Above 3 Second 184 Third 24 Name: Owner_Type, dtype: int64  </description>
    </item>
    
    <item>
      <title>Grouping &amp; multi-indexing</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/grouping-multi-index/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/grouping-multi-index/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)Location_Collected = df.groupby([&amp;#39;Location&amp;#39;, &amp;#39;Name&amp;#39;, &amp;#39;Fuel_Type&amp;#39;]).Kilometers_Driven.agg([len]) Location_Collected  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }      len   Location Name Fuel_Type      Ahmedabad Audi A3 35 TDI Attraction Diesel 1   Audi Q3 35 TDI Quattro Premium Plus Diesel 1   Audi Q5 2008-2012 2.</description>
    </item>
    
    <item>
      <title>Grouping and Sorting</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/sorting/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/sorting/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)Location_Collected = df.groupby([&amp;#39;Name&amp;#39;, &amp;#39;Fuel_Type&amp;#39;]).Kilometers_Driven.agg([len])Location_Collected = Location_Collected.reset_index() Location_Collected = Location_Collected.sort_values(by = &amp;#39;len&amp;#39;) Location_Collected  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Name Fuel_Type len     0 Audi A3 35 TDI Attraction Diesel 1   450 Maruti Dzire ZDI Diesel 1   451 Maruti Eeco 5 STR With AC Plus HTR CNG CNG 1   453 Maruti Ertiga SHVS VDI Diesel 1   456 Maruti Ertiga VXI Petrol Petrol 1   .</description>
    </item>
    
    <item>
      <title>Grouping by apply()</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/apply-method/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/apply-method/</guid>
      <description>import pandas as pddata = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)data.groupby(&amp;#39;Name&amp;#39;).apply(lambda df: df.Kilometers_Driven.iloc[0]) Name Audi A3 35 TDI Attraction 84004 Audi A3 35 TDI Premium Plus 52300 Audi A4 2.0 TDI 46000 Audi A4 2.0 TDI 177 Bhp Technology Edition 87001 Audi A4 2.0 TDI Multitronic 55000 ... Volvo S60 D5 Kinetic 70000 Volvo S80 D5 87000 Volvo V40 Cross Country D3 60000 Volvo XC60 D4 SUMMUM 64000 Volvo XC90 2007-2015 D5 AWD 70000 Length: 768, dtype: int64  data.</description>
    </item>
    
    <item>
      <title>Grouping-min</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/grouping-min/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/grouping-min/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df.groupby(&amp;#39;Kilometers_Driven&amp;#39;).Kilometers_Driven.min() Kilometers_Driven 1000 1000 1001 1001 1015 1015 1520 1520 2890 2890 ... 196000 196000 200000 200000 205000 205000 290000 290000 350000 350000 Name: Kilometers_Driven, Length: 755, dtype: int64  </description>
    </item>
    
    <item>
      <title>Indexing In Pandas</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/indexing/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/indexing/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df.iloc[0] Name Maruti Alto K10 LXI CNG Location Delhi Year 2014 Kilometers_Driven 40929 Fuel_Type CNG Transmission Manual Owner_Type First Mileage 32.26 km/kg Engine 998 CC Power 58.2 bhp Seats 4 Name: 0, dtype: object  df.iloc[:,0] 0 Maruti Alto K10 LXI CNG 1 Maruti Alto 800 2016-2019 LXI 2 Toyota Innova Crysta Touring Sport 2.4 MT 3 Toyota Etios Liva GD 4 Hyundai i20 Magna .</description>
    </item>
    
    <item>
      <title>Insert</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/insert/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/insert/</guid>
      <description>from numpy import *a = array([10, 20, 30, 40]) insert(a, [1,3], 50) array([10, 50, 20, 30, 50, 40])  insert(a, [1, 3],[50,60]) array([10, 50, 20, 30, 60, 40])  a = array([[10, 20, 30],[40, 50, 60],[70, 80, 90]]) insert(a, [1, 2], 100, axis = 0) array([[ 10, 20, 30], [100, 100, 100], [ 40, 50, 60], [100, 100, 100], [ 70, 80, 90]])  insert(a, [0,1], [[100], [200]], axis = 0) array([[100, 100, 100], [ 10, 20, 30], [200, 200, 200], [ 40, 50, 60], [ 70, 80, 90]])  insert(a, [0, 1], [100, 200], axis = 1) array([[100, 10, 200, 20, 30], [100, 40, 200, 50, 60], [100, 70, 200, 80, 90]])  </description>
    </item>
    
    <item>
      <title>Iris_Dataset</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/iris_dataset/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/iris_dataset/</guid>
      <description>from sklearn.datasets import load_iris iris = load_iris() X = iris.data y = iris.target feature_names = iris.feature_names target_names = iris.target_namesprint(&amp;#34;Feature names:&amp;#34;, feature_names) print(&amp;#34;Target names:&amp;#34;, target_names) print(&amp;#34;\nFirst 10 rows of X:\n&amp;#34;, X[:10]) Feature names: [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;] Target names: [&#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39;] First 10 rows of X: [[5.1 3.5 1.4 0.2] [4.9 3. 1.4 0.2] [4.7 3.2 1.3 0.2] [4.6 3.1 1.5 0.2] [5.</description>
    </item>
    
    <item>
      <title>L1 Normalisation</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/l1-normalisation/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/l1-normalisation/</guid>
      <description>import numpy as np from sklearn import preprocessingInput_data = np.array( [ [2.1, -1.9, 5.5], [-1.5, 2.4, 3.5], [0.5, -7.9, 5.6], [5.9, 2.3, -5.8] ] )data_normalized_l1 = preprocessing.normalize(Input_data, norm=&amp;#39;l1&amp;#39;)print(&amp;#34;\nL1 normalized data:\n&amp;#34;, data_normalized_l1) L1 normalized data: [[ 0.22105263 -0.2 0.57894737] [-0.2027027 0.32432432 0.47297297] [ 0.03571429 -0.56428571 0.4 ] [ 0.42142857 0.16428571 -0.41428571]]  </description>
    </item>
    
    <item>
      <title>L2 Normalisation</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/l2-normalisation/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/l2-normalisation/</guid>
      <description>import numpy as np from sklearn import preprocessingInput_data = np.array( [ [2.1, -1.9, 5.5], [-1.5, 2.4, 3.5], [0.5, -7.9, 5.6], [5.9, 2.3, -5.8] ] )data_normalized_l2 = preprocessing.normalize(Input_data, norm=&amp;#39;l2&amp;#39;)print(&amp;#34;\nL2 normalized data:\n&amp;#34;, data_normalized_l2) L2 normalized data: [[ 0.33946114 -0.30713151 0.88906489] [-0.33325106 0.53320169 0.7775858 ] [ 0.05156558 -0.81473612 0.57753446] [ 0.68706914 0.26784051 -0.6754239 ]]  </description>
    </item>
    
    <item>
      <title>Manipulating the index</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/manipulating-index/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/manipulating-index/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df.set_index(&amp;#34;Mileage&amp;#34;)  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Name Location Year Kilometers_Driven Fuel_Type Transmission Owner_Type Engine Power Seats   Mileage               32.26 km/kg Maruti Alto K10 LXI CNG Delhi 2014 40929 CNG Manual First 998 CC 58.</description>
    </item>
    
    <item>
      <title>Maps</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/maps/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/maps/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df_Km_mean = df.Kilometers_Driven.mean() df.Kilometers_Driven.map(lambda p: p - df_Km_mean) 0 -17578.288493 1 -4014.288493 2 -24507.288493 3 80492.711507 4 -29507.288493 ... 1229 30903.711507 1230 492.711507 1231 -30507.288493 1232 -6245.288493 1233 13935.711507 Name: Kilometers_Driven, Length: 1234, dtype: float64  def dfmean_km(row): row.Kilometers_Driven = row.Kilometers_Driven - df_Km_mean return row df.apply(dfmean_km, axis = &amp;#39;columns&amp;#39;)  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .</description>
    </item>
    
    <item>
      <title>Mean Removal</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/mean-removal/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/mean-removal/</guid>
      <description>import numpy as np from sklearn import preprocessingInput_data = np.array([ [2.1, -1.9, 5.5], [-1.5, 2.4, 3.5], [0.5, -7.9, 5.6], [5.9, 2.3, -5.8]] )print(&amp;#34;Mean =&amp;#34;, Input_data.mean(axis=0)) print(&amp;#34;Stddeviation = &amp;#34;, Input_data.std(axis=0)) Mean = [ 1.75 -1.275 2.2 ] Stddeviation = [2.71431391 4.20022321 4.69414529]  data_scaled = preprocessing.scale(Input_data) print(&amp;#34;Mean_removed =&amp;#34;, data_scaled.mean(axis=0)) print(&amp;#34;Stddeviation_removed =&amp;#34;, data_scaled.std(axis=0)) Mean_removed = [1.11022302e-16 0.00000000e+00 0.00000000e+00] Stddeviation_removed = [1. 1. 1.]  </description>
    </item>
    
    <item>
      <title>Missing Data</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/missing-data/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/missing-data/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df[pd.isnull(df.Year)]  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Name Location Year Kilometers_Driven Fuel_Type Transmission Owner_Type Mileage Engine Power Seats       df.Seats.fillna(&amp;#34;Unknown&amp;#34;) 0 4 1 5 2 7 3 5 4 5 .. 1229 5 1230 5 1231 5 1232 5 1233 5 Name: Seats, Length: 1234, dtype: object  df.</description>
    </item>
    
    <item>
      <title>Permutation</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/permutation/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/permutation/</guid>
      <description>from numpy import * from numpy.random import permutationpermutation(4) array([2, 3, 0, 1])  permutation(4) array([3, 0, 1, 2])  </description>
    </item>
    
    <item>
      <title>Plotting subsets of data with semantic mappings</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/plotting-subsets-of-data-with-semantic-mappings/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/plotting-subsets-of-data-with-semantic-mappings/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&amp;#34;darkgrid&amp;#34;)fmri = sns.load_dataset(&amp;#34;fmri&amp;#34;) sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, hue=&amp;#34;event&amp;#34;, kind=&amp;#34;line&amp;#34;, data=fmri); sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, hue=&amp;#34;region&amp;#34;, style=&amp;#34;event&amp;#34;, kind=&amp;#34;line&amp;#34;, data=fmri); sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, hue=&amp;#34;region&amp;#34;, style=&amp;#34;event&amp;#34;, dashes=False, markers=True, kind=&amp;#34;line&amp;#34;, data=fmri); sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, hue=&amp;#34;event&amp;#34;, style=&amp;#34;event&amp;#34;, kind=&amp;#34;line&amp;#34;, data=fmri); sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, hue=&amp;#34;region&amp;#34;, units=&amp;#34;subject&amp;#34;, estimator=None, kind=&amp;#34;line&amp;#34;, data=fmri.query(&amp;#34;event == &amp;#39;stim&amp;#39;&amp;#34;)); dots = sns.load_dataset(&amp;#34;dots&amp;#34;).query(&amp;#34;align == &amp;#39;dots&amp;#39;&amp;#34;) sns.relplot(x=&amp;#34;time&amp;#34;, y=&amp;#34;firing_rate&amp;#34;, hue=&amp;#34;coherence&amp;#34;, style=&amp;#34;choice&amp;#34;, kind=&amp;#34;line&amp;#34;, data=dots); dots = sns.load_dataset(&amp;#34;dots&amp;#34;).query(&amp;#34;align == &amp;#39;dots&amp;#39;&amp;#34;) sns.relplot(x=&amp;#34;time&amp;#34;, y=&amp;#34;firing_rate&amp;#34;, hue=&amp;#34;coherence&amp;#34;, style=&amp;#34;choice&amp;#34;, kind=&amp;#34;line&amp;#34;, data=dots); palette = sns.</description>
    </item>
    
    <item>
      <title>Plotting with date data</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/plotting-with-date-data/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/plotting-with-date-data/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&amp;#34;darkgrid&amp;#34;)df = pd.DataFrame(dict(time=pd.date_range(&amp;#34;2017-1-1&amp;#34;, periods=500), value=np.random.randn(500).cumsum())) g = sns.relplot(x=&amp;#34;time&amp;#34;, y=&amp;#34;value&amp;#34;, kind=&amp;#34;line&amp;#34;, data=df) g.fig.autofmt_xdate() </description>
    </item>
    
    <item>
      <title>Point plots</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/point-plots/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/point-plots/</guid>
      <description>import seaborn as sns import matplotlib.pyplot as plt sns.set(style=&amp;#34;ticks&amp;#34;, color_codes=True)titanic = sns.load_dataset(&amp;#34;titanic&amp;#34;)sns.catplot(x=&amp;#34;sex&amp;#34;, y=&amp;#34;survived&amp;#34;, hue=&amp;#34;class&amp;#34;, kind=&amp;#34;point&amp;#34;, data=titanic); sns.catplot(x=&amp;#34;class&amp;#34;, y=&amp;#34;survived&amp;#34;, hue=&amp;#34;sex&amp;#34;, palette={&amp;#34;male&amp;#34;: &amp;#34;g&amp;#34;, &amp;#34;female&amp;#34;: &amp;#34;m&amp;#34;}, markers=[&amp;#34;^&amp;#34;, &amp;#34;o&amp;#34;], linestyles=[&amp;#34;-&amp;#34;, &amp;#34;--&amp;#34;], kind=&amp;#34;point&amp;#34;, data=titanic); </description>
    </item>
    
    <item>
      <title>Rand</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/rand/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/rand/</guid>
      <description>from numpy import * from numpy.random import *rand(3, 2) array([[0.16835396, 0.03128012], [0.9387805 , 0.85898781], [0.07398522, 0.56233265]])  </description>
    </item>
    
    <item>
      <title>Relating Variables With Scatter Plots</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/relating-scatter-plots/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/relating-scatter-plots/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&amp;#34;darkgrid&amp;#34;)tips = sns.load_dataset(&amp;#34;tips&amp;#34;) sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, data=tips); sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, hue=&amp;#34;smoker&amp;#34;, data=tips); sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, hue=&amp;#34;smoker&amp;#34;, style=&amp;#34;smoker&amp;#34;, data=tips); sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, hue=&amp;#34;smoker&amp;#34;, style=&amp;#34;time&amp;#34;, data=tips); sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, hue=&amp;#34;size&amp;#34;, data=tips); sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, hue=&amp;#34;size&amp;#34;, palette=&amp;#34;ch:r=-.5,l=.75&amp;#34;, data=tips); sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, size=&amp;#34;size&amp;#34;, data=tips); sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, size=&amp;#34;size&amp;#34;, sizes=(15, 200), data=tips); </description>
    </item>
    
    <item>
      <title>Renaming</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/renaming/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/renaming/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df.rename(columns = {&amp;#39;Seats&amp;#39;:&amp;#39;Capacity&amp;#39;})  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Name Location Year Kilometers_Driven Fuel_Type Transmission Owner_Type Mileage Engine Power Capacity     0 Maruti Alto K10 LXI CNG Delhi 2014 40929 CNG Manual First 32.26 km/kg 998 CC 58.2 bhp 4.0   1 Maruti Alto 800 2016-2019 LXI Coimbatore 2013 54493 Petrol Manual Second 24.</description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/scaling/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/scaling/</guid>
      <description>import numpy as np from sklearn import preprocessingInput_data = np.array( [ [2.1, -1.9, 5.5], [-1.5, 2.4, 3.5], [0.5, -7.9, 5.6], [5.9, 2.3, -5.8] ] )data_scaler_minmax = preprocessing.MinMaxScaler(feature_range=(0,1)) data_scaled_minmax = data_scaler_minmax.fit_transform(Input_data)print (&amp;#34;\nMin max scaled data:\n&amp;#34;, data_scaled_minmax) Min max scaled data: [[0.48648649 0.58252427 0.99122807] [0. 1. 0.81578947] [0.27027027 0. 1. ] [1. 0.99029126 0. ]]  </description>
    </item>
    
    <item>
      <title>Showing multiple relationships with facets</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/showing-multiple-relationships-with-facets/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/showing-multiple-relationships-with-facets/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&amp;#34;darkgrid&amp;#34;)tips = sns.load_dataset(&amp;#34;tips&amp;#34;) sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, hue=&amp;#34;smoker&amp;#34;, col=&amp;#34;time&amp;#34;, data=tips); fmri = sns.load_dataset(&amp;#34;fmri&amp;#34;) sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, hue=&amp;#34;subject&amp;#34;, col=&amp;#34;region&amp;#34;, row=&amp;#34;event&amp;#34;, height=3, kind=&amp;#34;line&amp;#34;, estimator=None, data=fmri); sns.relplot(x=&amp;#34;timepoint&amp;#34;, y=&amp;#34;signal&amp;#34;, hue=&amp;#34;event&amp;#34;, style=&amp;#34;event&amp;#34;, col=&amp;#34;subject&amp;#34;, col_wrap=5, height=3, aspect=.75, linewidth=2.5, kind=&amp;#34;line&amp;#34;, data=fmri.query(&amp;#34;region == &amp;#39;frontal&amp;#39;&amp;#34;)); </description>
    </item>
    
    <item>
      <title>Slice</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/slice/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/slice/</guid>
      <description>from numpy import *s = slice(3, 9, 2)a = arange(20) a[s] array([3, 5, 7])  a[3:9:2] array([3, 5, 7])  </description>
    </item>
    
    <item>
      <title>Solve</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/numpy/solve/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/numpy/solve/</guid>
      <description>from numpy import * from numpy.linalg import solvea = array([[3, 1, 5],[1, 0, 8],[2, 1, 4]]) b = array([6, 7, 8])x = solve(a, b)print(x) [-3.28571429 9.42857143 1.28571429]  dot(a, x) array([6., 7., 8.])  </description>
    </item>
    
    <item>
      <title>Splitting the dataset</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/splitting-dataset/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/splitting-dataset/</guid>
      <description>from sklearn.datasets import load_iris iris = load_iris()X = iris.data y = iris.targetfrom sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split( X, y, test_size = 0.3, random_state = 1 )print(X_train.shape) print(X_test.shape) (105, 4) (45, 4)  print(y_train.shape) print(y_test.shape) (105,) (45,)  </description>
    </item>
    
    <item>
      <title>Summary Functions</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/summary-functions/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/summary-functions/</guid>
      <description>import pandas as pddf = pd.read_excel(&amp;#39;Car_Pricing.xlsx&amp;#39;)df.Mileage.describe() count 1234 unique 301 top 17.0 kmpl freq 35 Name: Mileage, dtype: object  df.Location.describe() count 1234 unique 11 top Mumbai freq 159 Name: Location, dtype: object  df.Seats.mean() 5.28454619787408  df.Location.unique() array([&#39;Delhi&#39;, &#39;Coimbatore&#39;, &#39;Mumbai&#39;, &#39;Hyderabad&#39;, &#39;Pune&#39;, &#39;Jaipur&#39;, &#39;Chennai&#39;, &#39;Kochi&#39;, &#39;Bangalore&#39;, &#39;Kolkata&#39;, &#39;Ahmedabad&#39;], dtype=object)  df.Name.value_counts() Maruti Alto LXi 9 Maruti Swift Dzire VDI 8 Honda City 1.5 V MT 8 Volkswagen Polo 1.2 MPI Highline 8 Honda Brio S MT 7 .</description>
    </item>
    
    <item>
      <title>Supervised Learning</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/supervised-learning/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/supervised-learning/</guid>
      <description>%matplotlib inline import matplotlib.pyplot as plt import numpy as np import seaborn as snsiris = sns.load_dataset(&amp;#39;iris&amp;#39;)X_iris = iris.drop(&amp;#39;species&amp;#39;, axis = 1) X_iris.shape (150, 4)  y_iris = iris[&amp;#39;species&amp;#39;] y_iris.shape (150,)  rng = np.random.RandomState(35) x = 10*rng.rand(40) y = 2*x-1+rng.randn(40) plt.scatter(x,y); from sklearn.linear_model import LinearRegression model = LinearRegression(fit_intercept=True) model LinearRegression()  X = x[:, np.newaxis] X.shape (40, 1)  model.fit(X, y) LinearRegression()  model.coef_ array([1.99839352])  model.intercept_ -0.9895459457775022  xfit = np.</description>
    </item>
    
    <item>
      <title>Train the model</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/train-model/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/train-model/</guid>
      <description>from sklearn.datasets import load_iris iris = load_iris()X = iris.data y = iris.targetfrom sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split( X, y, test_size = 0.4, random_state=1 )from sklearn.neighbors import KNeighborsClassifier from sklearn import metricsclassifier_knn = KNeighborsClassifier(n_neighbors = 3) classifier_knn.fit(X_train, y_train) KNeighborsClassifier(n_neighbors=3)  y_pred = classifier_knn.predict(X_test)print(&amp;#34;Accuracy:&amp;#34;, metrics.accuracy_score(y_test, y_pred)) Accuracy: 0.9833333333333333  sample = [[5, 5, 3, 2], [2, 4, 3, 5]]preds = classifier_knn.predict(sample) pred_species = [iris.target_names[p] for p in preds] print(&amp;#34;Predictions:&amp;#34;, pred_species) Predictions: [&#39;versicolor&#39;, &#39;virginica&#39;]  </description>
    </item>
    
    <item>
      <title>Unsupervised Learning</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/sklearn/unsupervised-learnibg/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/sklearn/unsupervised-learnibg/</guid>
      <description>%matplotlib inline import matplotlib.pyplot as plt import numpy as np import seaborn as snsiris = sns.load_dataset(&amp;#39;iris&amp;#39;)X_iris = iris.drop(&amp;#39;species&amp;#39;, axis = 1) X_iris.shape (150, 4)  y_iris = iris[&amp;#39;species&amp;#39;] y_iris.shape (150,)  rng = np.random.RandomState(35) x = 10*rng.rand(40) y = 2*x-1+rng.randn(40) plt.scatter(x,y); from sklearn.decomposition import PCA model = PCA(n_components=2) model PCA(n_components=2)  model.fit(X_iris) PCA(n_components=2)  X_2D = model.transform(X_iris) iris[&amp;#39;PCA1&amp;#39;] = X_2D[:, 0] iris[&amp;#39;PCA2&amp;#39;] = X_2D[:, 1] sns.lmplot(&amp;#34;PCA1&amp;#34;, &amp;#34;PCA2&amp;#34;, hue=&amp;#39;species&amp;#39;, data=iris, fit_reg=False); </description>
    </item>
    
    <item>
      <title>violinplots</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/seaborn/violinplots/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/seaborn/violinplots/</guid>
      <description>import seaborn as sns import matplotlib.pyplot as plt sns.set(style=&amp;#34;ticks&amp;#34;, color_codes=True)tips = sns.load_dataset(&amp;#34;tips&amp;#34;)sns.catplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;day&amp;#34;, hue=&amp;#34;sex&amp;#34;, kind=&amp;#34;violin&amp;#34;, data=tips); sns.catplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;day&amp;#34;, hue=&amp;#34;sex&amp;#34;, kind=&amp;#34;violin&amp;#34;, bw=.15, cut=0, data=tips); sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, hue=&amp;#34;sex&amp;#34;, kind=&amp;#34;violin&amp;#34;, split=True, data=tips); sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, hue=&amp;#34;sex&amp;#34;, kind=&amp;#34;violin&amp;#34;, inner=&amp;#34;stick&amp;#34;, split=True, palette=&amp;#34;pastel&amp;#34;, data=tips); g = sns.catplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, kind=&amp;#34;violin&amp;#34;, inner=None, data=tips) sns.swarmplot(x=&amp;#34;day&amp;#34;, y=&amp;#34;total_bill&amp;#34;, color=&amp;#34;k&amp;#34;, size=3, data=tips, ax=g.ax); </description>
    </item>
    
    <item>
      <title>Pandas</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/pandas/pandas/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/pandas/pandas/</guid>
      <description>import pandas as pddf = pd.read_csv(&amp;#39;diabetes.csv&amp;#39;)df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Pregnancies Glucose BloodPressure SkinThickness Insulin BMI DiabetesPedigreeFunction Age Outcome     0 6 148 72 35 0 33.6 0.627 50 1   1 1 85 66 29 0 26.6 0.351 31 0   2 8 183 64 0 0 23.</description>
    </item>
    
    <item>
      <title>Python Multiplication</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/basics/python-multiplication/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/basics/python-multiplication/</guid>
      <description>a = 9991 b = 2020 print(a*b) 20181820  </description>
    </item>
    
    <item>
      <title>Python-Addition</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/basics/python-addition/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/basics/python-addition/</guid>
      <description>a = 1999 b = 2020 print (a+b) 4019  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://VigneshJM99.github.io/mlnotes/python/basics/python-equation/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://VigneshJM99.github.io/mlnotes/python/basics/python-equation/</guid>
      <description>a = 52 b = 657 c = 2 d = 6 print(a+b**c/d) 71993.5  </description>
    </item>
    
  </channel>
</rss>